--- elfutils-0.127/src/ld.h.orig	2006-07-12 01:20:42.000000000 +0200
+++ elfutils-0.127/src/ld.h	2007-05-19 16:13:40.015849251 +0200
@@ -1090,7 +1090,7 @@
 #ifdef __GNUC_STDC_INLINE__
 __attribute__ ((__gnu_inline__))
 #endif
-extern inline bool
+extern __libdw_gnu_inline bool
 linked_from_dso_p (struct scninfo *scninfo, size_t symidx)
 {
   struct usedfiles *file = scninfo->fileinfo;
--- elfutils-0.127/libdwfl/dwfl_module_getsrc_file.c.orig	2006-04-11 22:52:05.000000000 +0200
+++ elfutils-0.127/libdwfl/dwfl_module_getsrc_file.c	2007-05-19 16:09:31.910875393 +0200
@@ -79,15 +79,15 @@
 	 && cu != NULL
 	 && (error = __libdwfl_cu_getsrclines (cu)) == DWFL_E_NOERROR)
     {
-      inline const char *INTUSE(dwarf_line_file) (const Dwarf_Line *line)
+      __libdw_gnu_inline const char *INTUSE(dwarf_line_file) (const Dwarf_Line *line)
 	{
 	  return line->files->info[line->file].name;
 	}
-      inline Dwarf_Line *dwfl_line (const Dwfl_Line *line)
+      __libdw_gnu_inline Dwarf_Line *dwfl_line (const Dwfl_Line *line)
 	{
 	  return &dwfl_linecu (line)->die.cu->lines->info[line->idx];
 	}
-      inline const char *dwfl_line_file (const Dwfl_Line *line)
+      __libdw_gnu_inline const char *dwfl_line_file (const Dwfl_Line *line)
 	{
 	  return INTUSE(dwarf_line_file) (dwfl_line (line));
 	}
--- elfutils-0.159/libdwfl/elf-from-memory.c.orig	2014-06-14 14:34:49.631795359 +0200
+++ elfutils-0.159/libdwfl/elf-from-memory.c	2014-06-14 14:35:58.288460597 +0200
@@ -205,7 +205,7 @@ elf_from_remote_memory (GElf_Addr ehdr_v
 	 segments_end, segments_end_mem and loadbase (if not
 	 found_base yet).  Returns true if sanity checking failed,
 	 false otherwise.  */
-      inline bool handle_segment (GElf_Addr vaddr, GElf_Off offset,
+      __libdw_gnu_inline bool handle_segment (GElf_Addr vaddr, GElf_Off offset,
 				  GElf_Xword filesz, GElf_Xword memsz,
 				  GElf_Xword palign)
 	{
@@ -286,7 +286,7 @@ elf_from_remote_memory (GElf_Addr ehdr_v
     {
       /* Reads the given segment.  Returns true if reading fails,
 	 false otherwise.  */
-      inline bool handle_segment (GElf_Addr vaddr, GElf_Off offset,
+      __libdw_gnu_inline bool handle_segment (GElf_Addr vaddr, GElf_Off offset,
 				  GElf_Xword filesz)
 	{
 	  GElf_Off start = offset & -pagesize;
--- elfutils-0.127/libdwfl/argp-std.c.orig	2007-04-05 11:12:36.000000000 +0200
+++ elfutils-0.127/libdwfl/argp-std.c	2007-05-19 16:08:04.209055832 +0200
@@ -106,7 +106,7 @@
 static error_t
 parse_opt (int key, char *arg, struct argp_state *state)
 {
-  inline void failure (Dwfl *dwfl, int errnum, const char *msg)
+  __libdw_gnu_inline void failure (Dwfl *dwfl, int errnum, const char *msg)
     {
       if (errnum == -1)
 	argp_failure (state, EXIT_FAILURE, 0, "%s: %s",
@@ -116,7 +116,7 @@
       if (dwfl != NULL)
 	dwfl_end (dwfl);
     }
-  inline error_t fail (Dwfl *dwfl, int errnum, const char *msg)
+  __libdw_gnu_inline error_t fail (Dwfl *dwfl, int errnum, const char *msg)
     {
       failure (dwfl, errnum, msg);
       return errnum == -1 ? EIO : errnum;
--- elfutils-0.130/libdwfl/linux-kernel-modules.c.orig	2007-10-16 07:21:41.000000000 +0200
+++ elfutils-0.130/libdwfl/linux-kernel-modules.c	2007-11-03 15:49:26.814775289 +0100
@@ -524,7 +524,7 @@
 {
   Dwarf_Addr start;
   Dwarf_Addr end;
-  inline Dwfl_Module *report (void)
+  __libdw_gnu_inline Dwfl_Module *report (void)
     {
       return INTUSE(dwfl_report_module) (dwfl, KERNEL_MODNAME, start, end);
     }
@@ -611,7 +611,7 @@
      only '_' and one only using '-'.  */
 
   char alternate_name[namelen + 1];
-  inline bool subst_name (char from, char to)
+  __libdw_gnu_inline bool subst_name (char from, char to)
     {
       const char *n = memchr (module_name, from, namelen);
       if (n == NULL)
--- elfutils-0.127/libdwfl/linux-proc-maps.c.orig	2007-04-05 11:12:36.000000000 +0200
+++ elfutils-0.127/libdwfl/linux-proc-maps.c	2007-05-19 16:09:02.093611158 +0200
@@ -134,7 +134,7 @@
   char *last_file = NULL;
   Dwarf_Addr low = 0, high = 0;
 
-  inline bool report (void)
+  __libdw_gnu_inline bool report (void)
     {
       if (last_file != NULL)
 	{
--- elfutils-0.159/libdwfl/dwfl_module_addrsym.c.orig	2014-06-14 14:36:48.425126218 +0200
+++ elfutils-0.159/libdwfl/dwfl_module_addrsym.c	2014-06-14 14:42:22.541785921 +0200
@@ -44,7 +44,7 @@ __libdwfl_addrsym (Dwfl_Module *mod, GEl
   /* Return true iff we consider ADDR to lie in the same section as SYM.  */
   GElf_Word addr_shndx = SHN_UNDEF;
   Elf *addr_symelf = NULL;
-  inline bool same_section (GElf_Addr value, Elf *symelf, GElf_Word shndx)
+  __libdw_gnu_inline bool same_section (GElf_Addr value, Elf *symelf, GElf_Word shndx)
     {
       /* For absolute symbols and the like, only match exactly.  */
       if (shndx >= SHN_LORESERVE)
--- elfutils-0.127/backends/ia64_retval.c.orig	2006-07-21 13:28:28.000000000 +0200
+++ elfutils-0.127/backends/ia64_retval.c	2007-05-19 16:13:08.295213177 +0200
@@ -96,7 +96,7 @@
      If we find a datum that's not the same FP type as the first datum, punt.
      If we count more than eight total homogeneous FP data, punt.  */
 
-  inline int hfa (const Dwarf_Op *loc, int nregs)
+  __libdw_gnu_inline int hfa (const Dwarf_Op *loc, int nregs)
     {
       if (fpregs_used == 0)
 	*locp = loc;
--- elfutils-0.130/libdw/libdw.h.orig	2007-10-16 07:21:41.000000000 +0200
+++ elfutils-0.130/libdw/libdw.h	2007-11-03 16:02:19.906831295 +0100
@@ -61,10 +61,12 @@
 # define __nonnull_attribute__(args...)
 #endif
 
-#ifdef __GNUC_STDC_INLINE__
+#if defined(__GNUC_STDC_INLINE__) || defined(__GNUC_GNU_INLINE__)
 # define __libdw_extern_inline extern __inline __attribute__ ((__gnu_inline__))
+# define __libdw_gnu_inline __inline __attribute__ ((__gnu_inline__))
 #else
 # define __libdw_extern_inline extern __inline
+# define __libdw_gnu_inline __inline
 #endif
 
 
--- elfutils-0.127/libdw/dwarf_getscopevar.c.orig	2006-04-11 22:52:05.000000000 +0200
+++ elfutils-0.127/libdw/dwarf_getscopevar.c	2007-05-19 16:11:06.586106385 +0200
@@ -93,7 +93,7 @@
   size_t match_file_len = match_file == NULL ? 0 : strlen (match_file);
   bool lastfile_matches = false;
   const char *lastfile = NULL;
-  inline bool file_matches (Dwarf_Files *files, size_t idx)
+  __libdw_gnu_inline bool file_matches (Dwarf_Files *files, size_t idx)
     {
       if (idx >= files->nfiles)
 	return false;
--- elfutils-0.127/libdw/libdw_visit_scopes.c.orig	2006-04-11 22:52:05.000000000 +0200
+++ elfutils-0.127/libdw/libdw_visit_scopes.c	2007-05-19 16:11:28.309875205 +0200
@@ -107,7 +107,7 @@
   if (INTUSE(dwarf_child) (&root->die, &child.die) != 0)
     return -1;
 
-  inline int recurse (void)
+  __libdw_gnu_inline int recurse (void)
     {
       return __libdw_visit_scopes (depth + 1, &child,
 				   previsit, postvisit, arg);
--- elfutils-0.127/libdw/dwarf_entry_breakpoints.c.orig	2006-04-11 22:52:05.000000000 +0200
+++ elfutils-0.127/libdw/dwarf_entry_breakpoints.c	2007-05-19 16:12:17.807534209 +0200
@@ -64,7 +64,7 @@
   *bkpts = NULL;
 
   /* Add one breakpoint location to the result vector.  */
-  inline int add_bkpt (Dwarf_Addr pc)
+  __libdw_gnu_inline int add_bkpt (Dwarf_Addr pc)
     {
       Dwarf_Addr *newlist = realloc (*bkpts, ++nbkpts * sizeof newlist[0]);
       if (newlist == NULL)
@@ -80,7 +80,7 @@
     }
 
   /* Fallback result, break at the entrypc/lowpc value.  */
-  inline int entrypc_bkpt (void)
+  __libdw_gnu_inline int entrypc_bkpt (void)
     {
       Dwarf_Addr pc;
       return INTUSE(dwarf_entrypc) (die, &pc) < 0 ? -1 : add_bkpt (pc);
@@ -107,7 +107,7 @@
   /* Search a contiguous PC range for prologue-end markers.
      If DWARF, look for proper markers.
      Failing that, if ADHOC, look for the ad hoc convention.  */
-  inline int search_range (Dwarf_Addr low, Dwarf_Addr high,
+  __libdw_gnu_inline int search_range (Dwarf_Addr low, Dwarf_Addr high,
 			   bool dwarf, bool adhoc)
     {
       size_t l = 0, u = nlines;
--- elfutils-0.135/src/strip.c.orig	2008-05-31 10:15:02.975418315 +0200
+++ elfutils-0.135/src/strip.c	2008-05-31 10:28:10.216279777 +0200
@@ -1335,7 +1335,7 @@
 	/* Update section headers when the data size has changed.
 	   We also update the SHT_NOBITS section in the debug
 	   file so that the section headers match in sh_size.  */
-	inline void update_section_size (const Elf_Data *newdata)
+	__libdw_gnu_inline void update_section_size (const Elf_Data *newdata)
 	{
 	  GElf_Shdr shdr_mem;
 	  GElf_Shdr *shdr = gelf_getshdr (scn, &shdr_mem);
--- elfutils-0.128/src/unstrip.c.orig	2007-06-06 01:44:33.000000000 +0200
+++ elfutils-0.128/src/unstrip.c	2007-06-12 18:51:03.570085226 +0200
@@ -371,7 +371,7 @@
 {
   Elf_Data *data = elf_getdata (outscn, NULL);
 
-  inline void adjust_reloc (GElf_Xword *info)
+  __libdw_gnu_inline void adjust_reloc (GElf_Xword *info)
     {
       size_t ndx = GELF_R_SYM (*info);
       if (ndx != STN_UNDEF)
@@ -988,7 +988,7 @@
     }
 
   bool fail = false;
-  inline void check_match (bool match, Elf_Scn *scn, const char *name)
+  __libdw_gnu_inline void check_match (bool match, Elf_Scn *scn, const char *name)
     {
       if (!match)
 	{
@@ -1147,7 +1147,7 @@
     }
 
   /* Locate a matching unallocated section in SECTIONS.  */
-  inline struct section *find_unalloc_section (const GElf_Shdr *shdr,
+  __libdw_gnu_inline struct section *find_unalloc_section (const GElf_Shdr *shdr,
 					       const char *name)
     {
       size_t l = nalloc, u = stripped_shnum - 1;
@@ -1983,7 +1983,7 @@
 handle_implicit_modules (const struct arg_info *info)
 {
   struct match_module_info mmi = { info->args, NULL, info->match_files };
-  inline ptrdiff_t next (ptrdiff_t offset)
+  __libdw_gnu_inline ptrdiff_t next (ptrdiff_t offset)
     {
       return dwfl_getmodules (info->dwfl, &match_module, &mmi, offset);
     }
